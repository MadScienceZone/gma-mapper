'\" t
'\" *** 403 ***
'\" <<ital-is-var>>
'\" <<bold-is-fixed>>
.TH MAPPER-PROTOCOL 7 "GMA-Mapper 4.3.4" 16-Mar-2023 "Games" \" @@mp@@
.SH NAME
mapper-protocol \- GMA client/server protocol specification
.SH DESCRIPTION
.LP
The
.BR mapper (6)
program displays a battle grid map for the players to see their tactical positions
with respect to their opponents and features of their environment (e.g., dungeon
rooms). To take advantage of its full multi-user capabilities, multiple
.B mapper
clients may be connected to the GMA
.BR server (6).
The following document is the definitive specification describing the protocol used to communicate all messages
between these programs (as well as others which interact with the GMA server,
such as
.BR gma-console (6)).
.LP
When a client is connected to a GMA server, they exchange
commands to indicate changes to the map display or other game state information.
To help keep communications simple and to help clients
recover from malformed or missing data, each
command is a newline-terminated line of text
as described in detail below.  If the mapper sends one of these
commands to the service, it is indicating that the local
user made those changes and requests that other connected
map clients update themselves accordingly.  If the mapper receives
the command from the service, it should comply to make the
corresponding change to itself.
.LP
The key words \*(lqMUST\*(rq, \*(lqMUST NOT\*(rq, \*(lqREQUIRED\*(rq, \*(lqSHALL\*(rq, \*(lqSHALL
NOT\*(rq, \*(lqSHOULD\*(rq, \*(lqSHOULD NOT\*(rq, \*(lqRECOMMENDED\*(rq,  \*(lqMAY\*(rq, and
\*(lqOPTIONAL\*(rq in this document are to be interpreted as described in
RFC 2119.
.LP
The software implementing this protocol
MUST 
allow Unicode text encoded as UTF-8
everywhere (of which 7-bit ASCII is a subset).
.LP
Each command (sent or received) consists of a command word
followed by a JSON object holding the parameters appropriate to
that command. (See the description of the 
.B //
command for an exception to this rule.)
.LP
The JSON object MAY be omitted (particularly if
the command in question has no parameters). Any expected parameter fields
which do not appear in the JSON object are automatically assumed to have
an appropriate \*(lqzero\*(rq value (i.e., empty string, zero numeric
value, empty list, boolean false, etc.). Any fields sent which were not expected by the receiver are silently
ignored.
.LP
JSON field names are matched case-sensitively. A client 
MAY 
match names
regardless of case but 
MUST 
emit them as documented here.
.LP
Field values are strings unless otherwise noted.
.LP
Unless otherwise noted, there is no response expected from
these commands. Even where a response is expected, it will be
asynchronously sent. In any case the client 
SHOULD NOT
wait for a server
response before considering its request to be completed. As a special
case, a client 
MAY 
be implemented to wait synchronously for a server
response during the authentication negotiation stage.
.LP
This describes protocol version 403. These notes are intended to be 
detailed enough to implement a client from and should be considered
the definitive standard reference to the protocol.
.LP
In the protocol command descriptions,
'\" <<TeX>>
'\" {\ttfamily fixed-width}
.B BOLD
'\" <</TeX>>
text indicates literal text to be sent as-is,
.I Italics
indicate a parameter whose value should appear in place of the name shown, and
[square brackets]
surround optional items which may be omitted.
.LP
The normal course of actions at the start of the conversation is for the server to immediately send an initial
greeting beginning with a
.B PROTOCOL
command followed by comments, 
.BR AC , 
.BR DSM , 
.BR UPDATES ,
and/or
.BR WORLD 
commands, then send an 
.B OK
command to indicate to the client its protocol version and to issue an
authentication challenge (if configured to authenticate). It is 
RECOMMENDED
that the initial greeting be limited only to comments, waiting until after authentication
to send anything more specific about your game.
.LP
After the
.B OK
command, the client responds with an
.B AUTH
command if it is required to authenticate. The server will respond with
.B GRANTED
or
.B DENIED
and then 
MAY 
issue more of the initial greeting commands listed above.
.LP
Finally, the server will issue a
.B READY
command to the client and begin normal interaction with the client.
.LP
The server 
MUST NOT
send the
.BR AC ,
.BR DENIED ,
.BR GRANTED ,
.BR OK ,
.BR READY ,
.BR UPDATES ,
or
.BR WORLD
commands after the initial
.B READY
is sent.
Clients MUST NOT send the
.BR AUTH 
command after receiving the server's
.B READY
signal.
.SS "Command Summary"
.LP
'\"<<TeX>>
The messages sent by clients and servers is summarized in the following table
and then explained in detail in the following paragraphs.
In the table, Message is the standard message name recommended for identifier names
in source code, Command is the string actually sent over the network, C\[<>]S indicates
whether the message is only sent from client to server, only from server to client, or
if it could be sent in either direction. Priv indicates if the command may only be
sent by a client authenticated as the GM.
Note that Reply indicates the command which
SHOULD
(eventually) arrive in response, but no guarantee is made as to if or when that happens
since all communications are asynchronous.
'\"The messages sent by clients and servers is summarized in Tables~\ref{tbl:mapper:6:messages}
'\"and \ref{tbl:mapper:6:messages2},
'\"and then explained in detail in the following paragraphs.
'\"In the table, 
'\"Command is the string actually sent over the network, C$\leftrightarrow$S indicates
'\"whether the message is only sent from client to server, only from server to client, or
'\"if it could be sent in either direction. Priv indicates if the command may only be
'\"sent by a client authenticated as the \gm.
'\"Note that Reply indicates the command which SHOULD
'\"(eventually) arrive in response, but no guarantee is made as to if or when that happens
'\"since all communications are asynchronous.
'\"\begin{table}
'\" \begin{tabular}{lcllll}\toprule
'\"  {\bfseries Command}&{\bfseries C$\leftrightarrow$S}&{\bfseries Reply}&{\bfseries Priv}&{\bfseries Data}&{\bfseries Description}\\\midrule
'\"  \z{//}     &C$\leftrightarrow$S&---        &no &any           &Human-readable comment\\
'\"  \z{/CONN}  &C$\rightarrow$S    &\z{CONN}   &no &none          &Request list of peer clients\\
'\"  \z{ACCEPT} &C$\rightarrow$S    &---        &no &\acronym{JSON}&Subscribe to a set of messages\\
'\"  \z{AC}     &C$\leftarrow$S     &---        &N/A&\acronym{JSON}&Add primary PC to party\\
'\"  \z{ALLOW}  &C$\rightarrow$S    &---        &no &\acronym{JSON}&Indicate supported features\\
'\"  \z{AUTH}   &C$\rightarrow$S    &\z{GRANTED}&no &\acronym{JSON}&Authenticate to server\\
'\"  \z{AV}     &C$\leftrightarrow$S&---        &no &\acronym{JSON}&Scroll clients' views\\
'\"  \z{AI}     &C$\leftrightarrow$S&---        &no &\acronym{JSON}&Add image to client's known set\\
'\"  \z{AI?}    &C$\leftrightarrow$S&---        &no &\acronym{JSON}&Ask for definition of image\\
\"   \z{AI/}    &C$\rightarrow$S    &---        &yes&\acronym{JSON}&Filter saved image definitions\\
'\"  \z{CC}     &C$\leftrightarrow$S&---        &no &\acronym{JSON}&Clear the chat history\\
'\"  \z{CLR}    &C$\leftrightarrow$S&---        &no &\acronym{JSON}&Remove objects from client\\
'\"  \z{CLR@}   &C$\leftrightarrow$S&---        &no &\acronym{JSON}&Remove elements from a map file\\
'\"  \z{CO}     &C$\leftrightarrow$S&---        &yes&\acronym{JSON}&Turn on/off combat mode\\
'\"  \z{CONN}   &C$\leftarrow$S     &---        &N/A&\acronym{JSON}&Notify of all connected peers\\
'\"  \z{CS}     &C$\leftrightarrow$S&---        &yes&\acronym{JSON}&Change the current time of day\\
'\"  \z{D}      &C$\rightarrow$S    &\z{ROLL}   &no &\acronym{JSON}&Initiate a die roll\\
'\"  \z{DD}     &C$\leftarrow$S     &\z{DD=}    &no &\acronym{JSON}&Store new presets for user\\
'\"  \z{DD+}    &C$\rightarrow$S    &\z{DD=}    &no &\acronym{JSON}&Add presets to user's set\\
'\"  \z{DD/}    &C$\rightarrow$S    &\z{DD=}    &N/A&\acronym{JSON}&Filter user's presets\\
'\"  \z{DD=}    &C$\leftarrow$S     &---        &N/A&\acronym{JSON}&Receive user's presets\\
'\"  \z{DENIED} &C$\leftarrow$S     &---        &N/A&\acronym{JSON}&Server denies access\\
'\"  \z{DR}     &C$\rightarrow$S    &\z{DD=}    &no &none          &Request user's presets\\
'\"  \z{DSM}    &C$\leftrightarrow$S&---        &yes&\acronym{JSON}&Define creature status marker\\
'\"  \z{ECHO}   &C$\leftrightarrow$S&\z{ECHO}   &no &\acronym{JSON}&Send data for server to echo back\\
'\"  \z{GRANTED}&C$\leftarrow$S     &---        &N/A&\acronym{JSON}&Server grants access\\
'\"  \z{I}      &C$\leftrightarrow$S&---        &yes&\acronym{JSON}&Indicate turn in combat\\
'\"  \z{IL}     &C$\leftrightarrow$S&---        &yes&\acronym{JSON}&Update the initiative list\\
'\"  \z{L}      &C$\leftrightarrow$S&---        &no &\acronym{JSON}&Load elements from file\\
'\"  \z{LS-ARC} &C$\leftrightarrow$S&---        &no &\acronym{JSON}&Add an arc to the map\\
'\"  \z{LS-CIRC}&C$\leftrightarrow$S&---        &no &\acronym{JSON}&Add an ellipse to the map\\
'\"  \z{LS-LINE}&C$\leftrightarrow$S&---        &no &\acronym{JSON}&Add a line to the map\\
'\"  \z{LS-POLY}&C$\leftrightarrow$S&---        &no &\acronym{JSON}&Add a polygon to the map\\
'\"  \z{LS-RECT}&C$\leftrightarrow$S&---        &no &\acronym{JSON}&Add a rectangle to the map\\
'\"  \z{LS-SAOE}&C$\leftrightarrow$S&---        &no &\acronym{JSON}&Add an area of effect to the map\\
'\"  \z{LS-TEXT}&C$\leftrightarrow$S&---        &no &\acronym{JSON}&Add some text to the map\\
'\"  \z{LS-TILE}&C$\leftrightarrow$S&---        &no &\acronym{JSON}&Add a graphic tile to the map\\
'\"  \z{MARCO}  &C$\leftarrow$S     &\z{POLO}   &N/A&none          &Check if client is alive\\
'\"  \z{MARK}   &C$\leftrightarrow$S&---        &no &\acronym{JSON}&Visually mark a spot\\
'\" \end{tabular}
'\" \caption{Summary of Client/Server Messages}\label{tbl:mapper:6:messages}
'\"\end{table}
'\"\begin{table}
'\" \begin{tabular}{lcllll}\toprule
'\"  {\bfseries Command}&{\bfseries C$\leftrightarrow$S}&{\bfseries Reply}&{\bfseries Priv}&{\bfseries Data}&{\bfseries Description}\\\midrule
'\"  \z{POLO}   &C$\rightarrow$S    &---        &no &none          &Acknowledge server's ping\\
'\"  \z{PRIV}   &C$\leftarrow$S     &---        &N/A&\acronym{JSON}&Privileged command denied\\\bottomrule
'\"  \z{PROGRESS}&C$\leftrightarrow$S&---       &no &\acronym{JSON}&Indicate progress on task\\
'\"  \z{PROTOCOL}&C$\leftarrow$S    &---        &N/A&int           &Signal protocol version in use\\
'\"  \z{PS}     &C$\leftrightarrow$S&---        &no &\acronym{JSON}&Place a creature token\\
'\"  \z{READY}  &C$\leftarrow$S     &---        &N/A&none          &Server sign-on complete\\
'\"  \z{ROLL}   &C$\leftarrow$S     &---        &N/A&\acronym{JSON}&Result of a die roll\\
'\"  \z{OA}     &C$\leftrightarrow$S&---        &no &\acronym{JSON}&Update object attributes\\
'\"  \z{OA+}    &C$\leftrightarrow$S&---        &no &\acronym{JSON}&Add values to an attribute\\
'\"  \z{OA-}    &C$\leftrightarrow$S&---        &no &\acronym{JSON}&Remove values to an attribute\\
'\"  \z{OK}     &C$\leftarrow$S     &\z{AUTH}   &N/A&\acronym{JSON}&Ask client to authenticate\\
'\"  \z{SYNC}   &C$\rightarrow$S    &any        &no &none          &Request replay of commands\\
'\"  \z{SYNC-CHAT}&C$\rightarrow$S  &\z{CC}/\z{ROLL}/\z{TO}&no&\acronym{JSON}&Request replay of messages\\
'\"  \z{TB}     &C$\leftrightarrow$S&---        &yes&\acronym{JSON}&Turn on/off client toolbar\\
'\"  \z{TO}     &C$\leftrightarrow$S&---        &no &\acronym{JSON}&Send chat message\\
'\"  \z{UPDATES}&C$\leftarrow$S     &---        &N/A&\acronym{JSON}&Advertise software updates\\
'\"  \z{WORLD}  &C$\leftarrow$S     &---        &N/A&\acronym{JSON}&Campaign world info\\\bottomrule
'\" \end{tabular}
'\" \caption{Summary of Client/Server Messages (continued)}\label{tbl:mapper:6:messages2}
'\"\end{table}
.LP
.TS
center;
lB lB cB lB lB lB lB
l lfC c lfC c c l.
Message	Command	C\[<>]S	Reply	Priv	Payload	Description
Accept	ACCEPT	C\[->]S	\fR\(em\fP	no	JSON	Subscribe to a set of messages
AddCharacter	AC	C\[<-]S	\fR\(em\fP	N/A	JSON	Add primary PC to party
AddDicePresets	DD+	C\[->]S	DD=	no	JSON	Add presets to user's set
AddImage	AI	C\[<>]S	\fR\(em\fP	no	JSON	Add image to client's known set
AddObjAttributes	OA+	C\[<>]S	\fR\(em\fP	no	JSON	Add values to an attribute
AdjustView	AV	C\[<>]S	\fR\(em\fP	no	JSON	Scroll clients' views
Allow	ALLOW	C\[->]S	\fR\(em\fP	no	JSON	Indicate supported features
Auth	AUTH	C\[->]S	GRANTED	no	JSON	Authenticate to server
Challenge	OK	C\[<-]S	AUTH	N/A	JSON	Ask client to authenticate
ChatMessage	TO	C\[<>]S	\fR\(em\fP	no	JSON	Send chat message
Clear	CLR	C\[<>]S	\fR\(em\fP	no	JSON	Remove objects from client
ClearChat	CC	C\[<>]S	\fR\(em\fP	no	JSON	Clear the chat history
ClearFrom	CLR@	C\[<>]S	\fR\(em\fP	no	JSON	Remove elements from a map file
CombatMode	CO	C\[<>]S	\fR\(em\fP	yes	JSON	Turn on/off combat mode
Comment	//	C\[<>]S	\fR\(em\fP	no	any	Human-readable comment
DefineDicePresets	DD	C\[->]S	DD=	no	JSON	Store new presets for user
Denied	DENIED	C\[<-]S	\fR\(em\fP	N/A	JSON	Server denies access
Echo	ECHO	C\[<>]S	ECHO	no	JSON	Send data for server to echo back to client
FilterDicePresets	DD/	C\[->]S	DD=	no	JSON	Remove some presets for user
FilterImages	AI/	C\[->]S	\fR\(em\fP	yes	JSON	Filter saved image definitions
Granted	GRANTED	C\[<-]S	\fR\(em\fP	N/A	JSON	Server grants access
LoadArcObject	LS-ARC	C\[<>]S	\fR\(em\fP	no	JSON	Add an arc to the map
LoadCircleObject	LS-CIRC	C\[<>]S	\fR\(em\fP	no	JSON	Add an ellipse to the map
LoadFrom	L	C\[<>]S	\fR\(em\fP	no	JSON	Load elements from file
LoadLineObject	LS-LINE	C\[<>]S	\fR\(em\fP	no	JSON	Add a line to the map
LoadPolygonObject	LS-POLY	C\[<>]S	\fR\(em\fP	no	JSON	Add a polygon to the map
LoadRectangleObject	LS-RECT	C\[<>]S	\fR\(em\fP	no	JSON	Add a rectangle to the map
LoadSpellArea\fR-\fP	LS-SAOE	C\[<>]S	\fR\(em\fP	no	JSON	Add an area of effect to the map
\ OfEffectObject	\^	\^	\^	\^	\^	\^
LoadTextObject	LS-TEXT	C\[<>]S	\fR\(em\fP	no	JSON	Add some text to the map
LoadTileObject	LS-TILE	C\[<>]S	\fR\(em\fP	no	JSON	Add a graphic tile to the map
Marco	MARCO	C\[<-]S	POLO	N/A	none	Check if client is alive
Mark	MARK	C\[<>]S	\fR\(em\fP	no	JSON	Visually mark a spot
PlaceSomeone	PS	C\[<>]S	\fR\(em\fP	no	JSON	Place creature token
Polo	POLO	C\[->]S	\fR\(em\fP	no	none	Acknowledge server's ping
Priv	PRIV	C\[<-]S	\fR\(em\fP	N/A	JSON	Priveleged command denied
Protocol	PROTOCOL	C\[<-]S	\fR\(em\fP	N/A	int	Signal protocol version in use
QueryDicePresets	DR	C\[->]S	DD=	no	none	Request user's presets
QueryImage	AI?	C\[<>]S	AI	no	JSON	Ask for definition of image
QueryPeers	/CONN	C\[->]S	CONN	no	none	Request list of peer clients
Ready	READY	C\[<-]S	\fR\(em\fP	N/A	none	Server sign-on complete
RemoveObjAttributes	OA-	C\[<>]S	\fR\(em\fP	no	JSON	Remove values from an attribute
RollDice	D	C\[->]S	ROLL	no	JSON	Initiate a die roll
RollResult	ROLL	C\[<-]S	\fR\(em\fP	N/A	JSON	Result of a die roll
Sync	SYNC	C\[->]S	\fRany\fP	no	none	Request replay of commands
SyncChat	SYNC-CHAT	C\[->]S	CC	no	JSON	Request replay of messages
\^	\^	\^	ROLL	\^	\^	\^
\^	\^	\^	TO	\^	\^	\^
Toolbar	TB	C\[<>]S	\fR\(em\fP	yes	JSON	Turn on/off client toolbar
UpdateClock	CS	C\[<>]S	\fR\(em\fP	yes	JSON	Change the current time of day
UpdateDicePresets	DD=	C\[<-]S	\fR\(em\fP	N/A	JSON	Receive user's presets
UpdateInitiative	IL	C\[<>]S	\fR\(em\fP	yes	JSON	Update the initiative list
UpdateObjAttributes	OA	C\[<>]S	\fR\(em\fP	no	JSON	Update object attributes
UpdatePeerList	CONN	C\[<-]S	\fR\(em\fP	N/A	JSON	Notify of all connected peers
UpdateProgress	PROGRESS	C\[<>]S	\fR\(em\fP	no	JSON	Indicate progress on task
UpdateStatusMarker	DSM	C\[<>]S	\fR\(em\fP	yes	JSON	Define creature status marker
UpdateTurn	I	C\[<>]S	\fR\(em\fP	yes	JSON	Indicate turn in combat
UpdateVersions	UPDATES	C\[<-]S	\fR\(em\fP	N/A	JSON	Advertise software updates
World	WORLD	C\[<-]S	\fR\(em\fP	N/A	JSON	Campaign world info
.TE
'\"<</TeX>>
.SS "Command Details"
.LP
The client/server messages and their parameters are detailed below, ordered by the server
command string sent or received.
'\" <<list>>
.TP 12
.B //
This is a server comment.  The entire command should be ignored by all clients. This is used
to inject informative context and messages into the client/server conversation which may be
of interest for debugging or interactive use.
.RS
.LP
'\" <</ital-is-var>>
.I "This is one of two exceptions to the rule that a command contains a JSON parameter"
.I "object. In this case, the"
entire
.I "line should be ignored by the client and not interpreted further."
'\" <<ital-is-var>>
This allows, for example, comments to be sent at the start of the server's
signon message to provide a human-readable declaration as to the allowed
usage of the server.
.RE
.TP
.BI "PROTOCOL " v
This command, which, if used at all, MUST be the first command sent by the server
to the client, gives an up-front indication to the client as to what protocol
version is expected by the server. Older versions of the server waited until
the
.B OK
command to notify the client, but as of protocol version 400 this is now too late
for the client to correctly process the commands that may be sent before the
.BR OK .
This, along with the 
.B //
server comment command, are the only two commands which do
'\" <</ital-is-var>>
.I not
'\" <<ital-is-var>>
have a JSON data payload attached to them. The protocol version number is
simply sent as an ASCII string of digits separated from the 
.B PROTOCOL
command word by a space.
.RS
.LP
Servers which implement protocol versions 400 and later MUST send this message
at the start of their conversations. Servers which implement older protocol versions
SHOULD send it.
.RE
.TP
.B AC
Add a character to the pop-up menu for map clients. This makes it easy to place important character tokens
on the map and ensures that such tokens are given consistent
.I id
values rather than generating a random one.
Clients MUST NOT send this command to each other; it is intended for the server to send to the clients.
The payload includes the same fields as the
.B PS
command.
.TP
.B ACCEPT
A client sends this message to the server to indicate that from this point
forward (until another
.B ACCEPT
command), only the commands listed
should be sent to it by the server. 
The payload is a JSON object with this parameter:
'\" <<list>>
'\" <</ital-is-var>>
.RS
.TP 
.BI Messages " (list)"
'\" <<ital-is-var>>
A list of command names the client wishes to receive.
This is a list of command names as they
appear in this specification (e.g.,
.BR "[\[dq]AI\[dq],\[dq]CO\[dq],\[dq]TO\[dq]]" ).
If it contains the special value
.RB \*(lq * \*(rq
or is empty, this means to accept all messages. Note that the server may still
decide to send messages such as comments or the 
.B MARCO
command (or others) at its discretion despite this request from the client.
.RE
'\" <</>>
.TP
.B AI
Add an image to the map.
(Supersedes the function of the
.BR AI ,
.BR AI: ,
.BR AI. ,
and
.BR AI@
commands as of protocol version 400.)
The payload is a JSON object with the following fields:
'\" <<list>>
.RS
.TP
.B Name
The name of the image as known within the mapper.
.TP
'\" <</ital-is-var>>
.BI Sizes " (list of objects)"
'\" <<ital-is-var>>
A list of sizes available for this object. This will be
.I merged
with any previously defined sizes for the same image name.
Each element of this list is an object with the following fields:
'\" <<list>>
.RS
.TP
.B File
The filename or server ID by which the image can be retrieved.
.TP
'\" <</ital-is-var>>
.BI ImageData " (base64-encoded bytes)"
If non-empty or not
.BR null ,
this provides the raw image data. This is DEPRECATED but still supported.
Instead, images SHOULD be loaded to the game server and their ServerID used
by clients.
.TP
'\" <</ital-is-var>>
.BI IsLocalFile " (bool)"
'\" <<ital-is-var>>
If
.BR true ,
then
.B File
gives a local file pathname for the image; otherwise it gives the
server-specific ID which the client will use to retrieve the file
from the server.
.TP
'\" <</ital-is-var>>
.BI Zoom " (float)"
The magnification level this bitmap represents for the given
image. Typically images are provided for
'\" <<ital-is-var>>
zoom
levels of 0.25, 0.5, 1, 2, and 4.
'\" <</>>
.RE
'\" <</>>
.LP
This does not
'\" <</ital-is-var>>
.I draw
'\" <<ital-is-var>>
the image on the map; it merely defines it so the client knows what to draw when an image of
the given
.B Name
at the specified
.B Zoom
factor is called for.
.LP
Note on clients retrieving images by server ID when
.B IsLocalFile
is
.B false
and
.B File
contains a server-side ID:
as currently implemented, the 
.B mapper
client checks to see if it has a cached version of the file. If so, and that
file is newer than 2 days, it is used without further checks. If the cached file
is older, the server is queried to see if it has a newer version of the file; if so,
that is retrieved and cached; otherwise, the existing cache is updated to note that
it was the known latest version as of that moment. If no usable cache file is available,
the file with the given
id
is obtained from the server. For example, if the image
id
were
.RB \*(lq abcdefg \*(rq,
the URL of the file to be retrieved would be
.IB base /a/ab/abcdefg.gif
or
.IB base /a/ab/abcdefg.png
where
.I base
is the base URL as specified to the 
.BI \-\-curl\-url\-base= base
option (or 
.BI curl\-url\-base= base
configuration file line).
.LP
Servers SHOULD be set up to provide alternative file formats so that, for example,
with ID
.B abcdefg
files such as 
.B a/ab/abcdefg.jpg
or
.B a/ab/abcdefg.png
may be retrieved for clients which use those other formats. 
Currently,
.B mapper.tcl
uses GIF or PNG format files.
.RE
.TP
.B AI?
Request for the named image.
Clients may send this if they need an image of the given
.I name
and 
.I zoom
(as described above for the
.B AI
command) but no such image is defined yet in the client. This
queries the server or connected peers to see if any of them know
of the needed image. The client should continue to process tasks without
waiting for a response (which is never guaranteed). If another peer knows
of the requested image, it should respond with an
.RB \*(lq AI \*(rq
command.
The payload is a JSON object with the following fields:
'\" <<list>>
.RS
.TP
.BI Name
The image name as known to the mapper.
.TP
'\" <</ital-is-var>>
.BI Sizes " (list of objects)"
'\" <<ital-is-var>>
The list of sizes for which the image data are requested.
Each element of the list is an object with the following field:
'\" <<list>>
.RS
.TP
'\" <</ital-is-var>>
.BI Zoom " (float)"
'\" <<ital-is-var>>
The requested magnification factor for the image.
.RE
.\" <</>>
.RE
.\" <</>>
.TP
.B AI/
Filters (removes) all the saved image definitions held in the server's database
whose names match a regular expression.
The payload is a JSON object with the following fields:
'\" <<list>>
.RS
.TP
.B Filter
The regular expression used to select which image names will be removed.
.TP
'\" <</ital-is-var>>
.BI "KeepMatching " (bool)
'\" <<ital-is-var>>
If true, only those images whose names match the
.B Filter
expression will be kept; the others will be removed. Otherwise,
the opposite is done: images whose names match
.B Filter
will be removed.
.RE
'\" <</>>
.TP
.B ALLOW
The client MAY send this command to the server after logging in. This tells
the server that the client supports one or more optional features. The
JSON payload has the following field:
.RS
'\" <<list>>
.TP
'\" <</ital-is-var>>
.BI Features " (list of strings)"
'\" <<ital-is-var>>
This is a list of feature names which the client wishes to enable.
Every time an
.B ALLOW
command is given, it resets the entire set of features, rather than 
adding to them.
Currently, only one feature is recognized:
.RS
'\" <<list>>
.TP
.B DICE-COLOR-BOXES
The client supports formatting controls in the die-roll title string sent
to the server in the
.B D
command and received from the server via the
.B ROLL
command. Specifically, the title may consist of multiple sub-titles
separated by U+2016 characters 
'\" <<TeX>>
'\"($\|$).
(||). 
'\" <</TeX>>
Each of these may also have a suffix
consisting of the U+2261 (\[==]) character followed by a color name or
.BI # rrggbb
color code, indicating the foreground color for that part of the title. A second
such suffix may be added to indicate the background color. If this feature is
not enabled, these formatting codes are stripped out by the server before sending
die roll results to a client which isn't prepared to interpret them.
'\" <</>>
'\" <</>>
.RE
.RE
.TP
.B AUTH
If the server included a challenge string (see the
.B OK
command below), then it requires a password before the client is allowed to
join the server. This is intended to prevent accidental connections by clients
to the wrong servers, and to filter out nuisance connections from spammers or
other random connections, so it is a fairly simple authentication mechanism
using a password shared by all clients in a play group.
The payload is a JSON object with the following parameters:
'\" <<list>>
.RS
.TP
.B Client
This describes the client program. By convention, this value
SHOULD include the version number (e.g., \*(lqmapper 4.0.1\*(rq).
.TP
'\" <</ital-is-var>>
.BI Response " (base64-encoded bytes)"
'\" <<ital-is-var>>
The client's response to the server's challenge.
.TP
.B User
If provided, the
.B User
field gives the local username of the player who is
running the client. This name will be displayed for purposes
such as chat-window conversations and dice rolling. If not
provided, \*(lqanonymous\*(rq will be used, unless the authentication
is successful for the GM role, in which case \*(lqGM\*(rq will be
used regardless of any value sent by the client for the
.B User
field.
'\" <</>>
.LP
Calculation of the 
.B Response
field is as follows.
.LP
Given:
'\" <<TeX>>
'\" \begin{align*}
'\"  C & \text{ is the server's challenge as a binary string of bytes }\\
'\"    & \text{ (after decoding from the base-64 string sent by the server),} \\
'\"  H(x) & \text{ is the binary SHA-256 hash digest of \(x\),} \\
'\"  P & \text{ is the password needed to connect to the server, and the notation} \\
'\"  x || y& \text{ means to concatenate the strings \(x\) and \(y\),}
'\" \end{align*}
'\" then the procedure to calculate the \z{Response} string is:
'\" \begin{enumerate}
'\"  \item Obtain $i$ by extracting the first two bytes from $C$ as an unsigned, big-endian,
'\" 16-bit integer value.
'\"  \item Calculate $D=H(C||P)$.
'\"  \item Repeat $i$ times:
'\"  \begin{enumerate}
'\"   \item Calculate $D'=H(P||D)$.
'\"   \item Let $D=D'$.
'\"  \end{enumerate}
'\" \end{enumerate}
.\" <<desc>>
.TP 5
.I C
is the server's challenge as a binary string of bytes (after decoding from the base-64 string actually sent by the server),
.TP
.RI H( x )
is the binary SHA-256 hash digest of 
.IR x ,
.TP
.I P
is the password needed to connect to the server, and the notation
.TP
.IR x || y
means to concatenate strings
.I x
and 
.IR y ,
.\" <</>>
.LP
To calculate the
.B Response
string, the client must do the following:
.\" <<enum>>
.TP 4
(1)
Obtain
.I i
by extracting the first two bytes from
.I C
as an unsigned, big-endian, 16-bit integer value.
.TP
(2)
Calculate 
.IR D =H( C || P ).
.TP
(3)
Repeat 
.I i
times: Calculate 
.IR D '=H( P || D "); then let " D = D '
.\" <</>>
'\" <</TeX>>
.LP
The binary value of 
'\" <</ital-is-var>>
.I D
'\" <<ital-is-var>>
is then encoded using base-64 and sent as the
.B Response
value.
.LP
Starting with protocol version 332, the server is guaranteed to
respond to the
.B AUTH
command with either a 
.B DENIED
or
.B GRANTED
message (q.v.). The client MAY wait for this response before proceeding
with its other operations, so that it knows for sure how the authentication
went.
.RE
.TP
.B AV
Adjust the map's viewport by making the grid square identified by the
.B Grid
parameter visible at the top-left of the display. If this field is not
present or is empty, then clients MAY fall back to the older behavior of
adjusting the
view by setting the horizontal scrollbar to 
.B XView
as a fraction of its full distance, where 0.0 is all the way to the left and
1.0 is all the way to the right; the vertical scrollbar is similarly set based on
.B YView
where 0.0 is all the way to the top and 1.0 is all the way to the bottom.
The payload is a JSON object with the following fields:
'\" <<list>>
.RS
.TP
.B Grid
The name of the grid square which should be in the upper-left of the display.
This uses the same naming convention as the grid is labelled on the display
(e.g., the far upper-left grid square of the entire map is
.BR A0 ).
.TP
'\" <</ital-is-var>>
.BI XView " (float)"
The fraction of full distance the
.IR x -axis
scrollbar should be moved to.
.TP
.BI YView " (float)"
As
.BR XView ,
but for the 
.I y
axis.
'\" <<ital-is-var>>
.RE
'\" <</>>
.TP
.B CC
Clear the chat history. The payload is a JSON object with the following fields:
'\" <<list>>
.RS
.TP
.BI RequestedBy
The name of the user who initiated this operation, if known. 
Clients SHOULD NOT set this field; it is set by the server when sending this
message to clients.
.TP
'\" <</ital-is-var>>
.BI DoSilently " (bool)"
If true, the client MAY clear its chat history without notifying the user;
otherwise it SHOULD indicate the action to the user.
.TP
.BI Target " (int)"
If 0 or missing, clear all messages in the history. Otherwise, if positive, clear all
messages with 
.B MessageID
less than the
.B target
value. If negative, clear all but the most recent
'\" <<ital-is-var>>
.RI \- target
messages (e.g., a
.I target
of \-50 clears all but the most recent 50 messages).
.TP
'\" <</ital-is-var>>
.BI MessageID " (int)"
'\" <<ital-is-var>>
This message counts the same as a chat message and is included in the history
itself. Thus, the server sets this field to a unique identifier for this
message. Clients SHOULD NOT set this field.
.RE
'\" <</>>
.TP
.B CLR
Remove object with a given internal ID from the map. The payload is a JSON
object with the following field:
'\" <<list>>
.RS
.TP
.BI ObjID
This may be the object ID for the specific object to remove, or
.RB \*(lq * \(rq 
to mean all objects should be removed;
.RB \*(lq E* \(rq 
to mean all map elements should be removed;
.RB \*(lq M* \(rq 
to mean all monster tokens should be removed;
.RB \*(lq P* \(rq 
to mean all player tokens should be removed;
or it may be a creature name (in the form
.RI \*(lq[ imagename =] name \*(rq)
which removes a creature token whose display name matches the
.B ObjID
value.
.RE
'\" <</>>
.TP
.B CLR@
This command tells the client to \*(lqunload\*(rq the contents of a map
file. In other words, all the elements listed in that file are removed from
the map canvas rather than being added to it. The payload is a JSON object
with the following fields:
'\" <<list>>
.RS
.TP
.B File
The pathname or server ID which specifies the map file in question.
.TP
'\" <</ital-is-var>>
.BI IsLocalFile " (bool)"
'\" <<ital-is-var>>
If true, 
.B File
refers to a local file the client can read directly. Otherwise it is
a server ID which can be used to fetch the file from its cache or from
the server.
.RE
'\" <</>>
.TP
.B CO
Sets the combat mode state in the client.  The payload is a JSON object
with the following attribute:
'\" <<list>>
.RS
.TP
'\" <</ital-is-var>>
.BI Enabled " (bool)"
'\" <<ital-is-var>>
If true, the client should be in combat (initiative) mode, otherwise it should not.
.RE
'\" <</>>
.TP
.B CONN
Update the list of connected peer clients to those described in the JSON
payload, which contains the following field.
Clients MUST NOT send this command. This supersedes the
.BR CONN ,
.BR CONN: ,
and 
.BR CONN.
commands from protocol versions prior to 400.
'\" <<list>>
.RS
.TP
'\" <</ital-is-var>>
.BI PeerList " (list of objects)"
'\" <<ital-is-var>>
A list of objects, each describing a single connected client, with the following
fields:
'\" <<list>>
.RS
.TP
.BI Addr
The IP address and port the peer connected from.
.TP
.BI User
The username as provided during authentication.
.TP
.BI Client
The name of the client program in use.
.TP
'\" <</ital-is-var>>
.BI LastPolo " (float)"
The number of seconds since the server last heard a 
.B POLO
command from the peer.
.TP
.BI IsAuthenticated " (bool)"
If true, the client successfully negotiated the server's authentication process.
.TP
.BI IsMe " (bool)"
'\" <<ital-is-var>>
If true, this object describes the client which received this command.
'\" <</>>
.RE
'\" <</>>
.RE
.TP
.B CS
Update the client's clock.
The JSON payload includes the following fields:
'\" <<list>>
.RS
.TP
'\" <</ital-is-var>>
.BI Absolute " (int64)"
The absolute time on the GMA world clock (in tenths of seconds since the epoch).
.TP
.BI Relative " (int64)"
The elapsed time on the GMA world clock (in tenths of seconds since the GM set a
reference point, e.g., the start of combat).
.TP
.BI Running " (bool)"
'\" <<ital-is-var>>
If true, the local client should continue advancing the clock in real-time locally after updating the time to the new absolute time.
Otherwise, cancel real-time updates if they were running, leaving the clock at the given absolute time. The local real-time updating
events should only be performed when not in combat mode.
'\" <</>>
.RE
.TP
.B D
Roll dice using the server's built-in die rolling facility.
The JSON payload contains the following fields:
'\" <<list>>
.RS
.TP
'\" <</ital-is-var>>
.BI Recipients " (list of strings)"
The names of the people who should receive the results
of the die roll. For global or GM results, this should be 
.BR null .
.TP
.B RequestID
If you put a string value in this field, it will be sent back in any
.B ROLL
response messages the server sends to you in response to this request. This
allows a client to associate responses to the requests that generated them.
You may leave this blank or omit it if you don't care to match requests with
responses.
.TP
.BI ToAll " (bool)"
If true, this is a global die-roll, and the result should be
sent to all clients.
.TP
.BI ToGM " (bool)"
If true, this die-roll will be sent \*(lqblind\*(rq to the GM only.
Not even the requester will see the result of the roll, only the GM will.
.TP
.BI RollSpec
'\" <<ital-is-var>>
The die-roll specification, like \*(lqd20+12\*(rq or \*(lq6d6 fire\*(rq.
If this field is empty, the previous die-roll from this client is repeated,
or \*(lq1d20\*(rq if there was no previous one.
'\" <</>>
.RE
.TP
.B DD
Store Die-Roll Presets.
Clients send this command to the server to request it to store a set of
die-roll presets for it to retrieve for use in subsequent sessions.
The JSON payload is identical to the one sent by the server in the
.B DD=
command, with the addition of the following optional field:
.RS
'\" <<list>>
.TP
.B For
The name of the user whose presets are being affected. This is optional;
if omitted, the presets of the user making this request are affected. Only
the GM may change other users' presets.
'\" <</>>
.LP
The server SHOULD respond by issuing a
.B DD=
command to all peer clients logged in with the same username as the
affected user. 
.RE
.TP
.B DD+
Add to Die-Roll Presets.
Clients send this command to the server to add an additional set of die-roll
presets to the collection it was already holding for that user. The JSON
payload is identical to the one sent for the 
.B DD
command.
The server SHOULD respond by issuing a
.B DD=
command to all peer clients logged in with the same username as the
requesting client. 
.TP
.B DD/
Filter die-roll presets. This removes a set of die-roll presets
from the server's storage for the user.
The server SHOULD respond by issuing a
.B DD=
command to all peer clients logged in with the same username as the
affected user. 
The JSON payload includes the following field:
'\" <<list>>
.RS
.TP
.B Filter
The value is a regular expression. The server will delete all die-roll
presets whose
.B Name
attribute matches this regular expression.
.TP
.B For
The name of the user whose presets are being filtered. This is optional;
if omitted, the presets of the user making this request are affected. Only
the GM may filter other users' presets.
'\" <</>>
.RE
.TP
.B DD=
This command defines the list of die-roll presets the client should know.
This replaces any previous set of presets the client was using.
Clients MUST NOT send this command. This supersedes the commands
.BR DD= ,
.BR DD: ,
and 
.BR DD.\&
in protocol versions prior to 400.
The JSON payload includes the following fields:
'\" <<list>>
.RS
.TP
'\" <</ital-is-var>>
.BI Presets " (list of objects)"
'\" <<ital-is-var>>
Each element in this list describes a single preset. It has the following
fields:
'\" <<list>>
.RS
.TP
.BI Name
The name by which this preset is identified to the user. This MUST
be unique for that user.  The client SHOULD sort the preset list by 
the 
.B Name
field before displaying. If a vertical bar 
.RB (\*(lq | \*(rq) 
appears in the
.BR Name ,
all text up to and including the bar SHOULD be suppressed from display.
.TP
.BI Description
A text description of the purpose of the preset.
.TP
.BI DieRollSpec
The die-roll specification to send to the server when rolling this preset.
'\" <</>>
.RE
'\" <</>>
.RE
.TP
.B DENIED
Access to the server is denied. The server will send this to a client; clients
MAY NOT send it.
The JSON payload sent with this command includes the field:
'\" <<list>>
.RS
.TP
.B Reason
Text description of why the access was refused.
'\" <</>>
.RE
.TP
.B DR
Retrieve the authenticated user's die roll presets. This SHOULD
result in the server sending the
.B DD=
command back to the requesting client. 
.TP
.B DSM
Defines (or re-defines) a condition status marker which the client SHOULD
use to mark creature tokens when the creature has the associated condition in
effect. The JSON payload includes the following fields:
'\" <<list>>
.RS
.TP
.B Condition
The name of the condition being described.
If there was already a marker defined for that condition, it is replaced with the new
definition. If either 
.B Shape
or
.B Color
is the empty string or
.BR null ,
then the condition is effectively removed from the list of conditions
known to the mapper. Creature conditions are in effect if their name appears in the list value
for that creature's 
.B StatusList
attribute.
The mapper comes with the following conditions pre-defined:
.BR "ability drained" ,
.BR bleed ,
.BR blinded ,
.BR confused ,
.BR cowering ,
.BR dazed ,
.BR dazzled ,
.BR deafened ,
.BR disabled ,
.BR dying ,
.BR "energy drained" ,
.BR entangled ,
.BR exhausted ,
.BR fascinated ,
.BR fatigued ,
.BR flat-footed ,
.BR frightened ,
.BR grappled ,
.BR helpless ,
.BR incorporeal ,
.BR invisible ,
.BR nauseated ,
.BR panicked ,
.BR paralyzed ,
.BR petrified ,
.BR pinned ,
.BR poisoned ,
.BR prone ,
.BR shaken ,
.BR sickened ,
.BR stable ,
.BR staggered ,
.BR stunned ,
and
.BR unconscious .
.TP
.B Shape
The shape of the marker to be placed if the creature has this condition.
The mapper will attempt to arrange multiple markers with the same shape such
that they are all visible at the same time. This value may be one of the 
'\" <<TeX>>
'\"symbols shown in Table~\ref{tbl:manpages:mapper:6:conditions}.
'\"\begin{table}
'\" \begin{center}
'\"  \begin{tabular}{lp{4in}}\toprule
'\"   \bfseries Symbol & \bfseries Description of Indicator \\\midrule
'\"    \z{|v} & A small downward-pointing triangle against the middle of the left edge of the token.
'\"             (This is a lower-case ``\z{v}''.)\\
'\"    \z{v|} & A small downward-pointing triangle against the middle of the right edge of the token.
'\" (This is a lower-case ``\z{v}''.)\\
'\"    \z{|o} & A small circle against the middle of the left edge of the token.
'\" (This is a lower-case ``\z{o}''.)\\
'\" \z{o|} & A small circle against the middle of the right edge of the token.
'\" (This is a lower-case ``\z{o}''.)\\
'\" \z{|<>} & A small diamond against the middle of the left edge of the token.\\
'\" \z{<>|} & A small diamond against the middle of the right edge of the token.\\
'\" \z{/} & A slash (upper right to lower left) through the entire token.\\
'\" \z{\textbackslash} & A back-slash (upper left to lower right) through the entire token.\\
'\" \z{//} & A double slash (upper right to lower left) through the entire token.\\
'\" \z{\textbackslash\textbackslash} & A double back-slash (upper left to lower right) through the entire token.\\
'\" \z{-} & A single horizontal line drawn through the center of the entire token.\\
'\" \z{=} & A double horizontal line drawn through the center of the entire token.\\
'\" \z{|} & A single vertical line drawn through the center of the entire token.\\
'\" \z{||} & A double vertical line drawn through the center of the entire token.\\
'\" \z{+} & A cross drawn through the entire token.\\
'\" \z{\#} & A hash-mark drawn through the entire token.\\
'\" \z{V} & A large downward triangle drawn around the entire token.  (This is an upper-case letter ``\z{V}''.)\\
'\" \z{\textasciicircum} & A large upward triangle drawn around the entire token.\\
'\" \z{<>} & A large diamond drawn around the entire token.\\
'\" \z{O} & A large circle drawn around the entire token. (This is an upper-case letter ``\z{O}''.)\\
'\" \bottomrule
'\" \end{tabular}
'\" \caption{Condition Marker Symbols\label{tbl:manpages:mapper:6:conditions}}
'\" \end{center}
'\"\end{table}
following:
.RS
.\" <<desc>>
.TP
.B |v
A small downward-pointing triangle against the middle of the left edge of the token.
(This is a lower-case \*(lqv\*(rq.)
.TP
.B v|
A small downward-pointing triangle against the middle of the right edge of the token.
(This is a lower-case \*(lqv\*(rq.)
.TP
.B |o
A small circle against the middle of the left edge of the token.
(This is a lower-case \*(lqo\*(rq.)
.TP
.B o|
A small circle against the middle of the right edge of the token.
(This is a lower-case \*(lqo\*(rq.)
.TP
.B |<>
A small diamond against the middle of the left edge of the token.
.TP
.B <>|
A small diamond against the middle of the right edge of the token.
.TP
.B /
A slash (upper right to lower left) through the entire token.
.TP
.B \e
A back-slash (upper left to lower right) through the entire token.
.TP
.B //
A double slash (upper right to lower left) through the entire token.
.TP
.B "\e\e"
A double back-slash (upper left to lower right) through the entire token.
.TP
.B \-
A single horizontal line drawn through the center of the entire token.
.TP
.B =
A double horizontal line drawn through the center of the entire token.
.TP
.B |
A single vertical line drawn through the center of the entire token.
.TP
.B ||
A double vertical line drawn through the center of the entire token.
.TP
.B +
A cross drawn through the entire token.
.TP
.B #
A hash-mark drawn through the entire token.
.TP
.B V
A large downward triangle drawn around the entire token.
(This is an upper-case letter \*(lqV\*(rq.)
.TP
.B ^
A large upward triangle drawn around the entire token.
.TP
.B <>
A large diamond drawn around the entire token.
.TP
.B O
A large circle drawn around the entire token.
(This is an upper-case letter \*(lqO\*(rq.)
.RE
.\" <</>>
'\" <</TeX>>
.TP
.B Color
The color to draw the marker in any of the forms documented
above, or the special value
.RB \*(lq * \*(rq,
which means to draw the marker in the same color as the creature's
threatened area.
.RS
.LP
If 
.I color
begins with 
.RB \*(lq \-\- \*(rq
(e.g., 
.RB \*(lq \-\-red \*(rq),
then the marker is drawn with dashed lines instead of solid ones.
If it begins with
.RB \*(lq .. \*(rq
(e.g., 
.RB \*(lq ..blue \*(rq),
then the effect is the same, but the dashes are shorter.
.RE
.TP
.B Description
A description of the effects on the character of having that condition
applied. This is intended to be shown to players (for example,
if they hover their mouse over an affected creature token).
'\" <</>>
.RE
.TP
.B ECHO
Ask that the server send this message back to you. This may be used
for synchronization since it indicates to the client when the server
got to this request amongst the others it received. The following
fields may be populated:
.RS
'\" <<list>>
.TP 10
.B s
An arbitrary string value.
.TP
'\" <</ital-is-var>>
.BI "i " (int)
An arbitrary integer value.
.TP
.BI "b " (bool)
An arbitrary boolean value.
.TP
.BI "o " (object)
'\" <<ital-is-var>>
An arbitrary set of key/value pairs, with each value having any type.
.RE
'\" <</>>
.TP
.B GRANTED
Access to the server is granted. The server will send this to a client; no client should send it. The JSON payload contains the field:
'\" <<list>>
.RS
.TP
.B User
The user name for this client. This is the name provided by the client,
.RB \*(lq anonymous \*(rq 
if the client didn't give one, or 
.RB \*(lq GM \*(rq 
if the
client authenticated as the GM.
'\" <</>>
.RE
.TP
.B I
Update the time clock for initiative-based actions.  If the mapper
is in combat mode, the clock display is updated accordingly.
The JSON object payload includes the following fields:
'\" <<list>>
.RS
.TP
.B ActorID
The object identifier of the creature whose turn it is. This may
be the unique object ID code, the creature name as documented in the
.B AC
command, the special string
.RB \*(lq *Monsters* \*(rq
which indicates that all creatures with monster-type tokens have
initiative, or may be of the form
.BI \fR\*(lq\fP/ regex \fR\*(rq,\fP
which matches all creatures whose names match the regular expression
.IR regex .
.TP
'\" <</ital-is-var>>
.BI Hours " (int)"
The number of hours elapsed since the start of combat.
.TP
.BI Minutes " (int)"
The number of minutes elapsed since the start of this hour of combat.
.TP
.BI Seconds " (int)"
The number of seconds elapsed since the start of this minute of combat.
.TP
.BI Rounds " (int)"
The number of rounds elapsed since the start of combat.
.TP
.BI Count " (int)"
'\" <<ital-is-var>>
The number of initiative slots elapsed since the start of the round.
'\" <</>>
.RE
.TP
.B IL
Update the initiative list.
The JSON payload includes the following field:
'\" <<list>>
.RS
.TP
'\" <</ital-is-var>>
.BI InitiativeList " (list of objects)"
The current initiative list is given as a list of initiative slots, each of which
is an object with the following fields:
'\" <<list>>
.RS
.TP
.BI Slot " (int)"
The slot number. As currently implemented this is a number in the range [0,59] which
gives the \*(lqcount\*(rq (1/10th second) in the round where this creature may act.
.TP
.BI CurrentHP " (int)"
The creature's current hit point total.
.TP
.BI Name
The creature's name as displayed on the map.
.TP
.BI IsHolding " (bool)"
If true, the creature is holding their action.
.TP
.BI HasReadiedAction " (bool)"
If true, the creature is holding a readied action.
.TP
.BI IsFlatFooted " (bool)"
'\" <<ital-is-var>>
If true, the creature is flat-footed.
'\" <</>>
.RE
'\" <</>>
.RE
.TP
.B L
Loads map elements into the map client, either replacing or adding to the
current contents of the map. Supersedes the function of commands
.BR L ,
.BR M ,
.BR M? ,
and
.B M@
in protocol versions prior to 400.
The payload is a JSON object with the following fields:
'\" <<list>>
.RS
.TP
.B File
The local pathname or server ID identifying the map file to be loaded.
.TP
.BI IsLocalFile " (bool)"
If true, 
.B File
refers to a local filename; otherwise it is a server ID.
.TP
.BI CacheOnly " (bool)"
If true, the server is only advising the client that it would be good to have
a cached copy of the
file
on hand for later. The client MUST NOT actually load the file's contents to the
displayed map at this time.
.TP
.BI Merge " (bool)"
If true, the map elements in
.B File
are merged with the map's current contents. Otherwise the map's current
elements are replaced by the new ones in
.BR File .
.RE
'\" <</>>
.TP
.BI LS- type
This set of commands
load a single map element into the map.
As opposed to the
.B L
command which directs the client to read a file to get one or more objects,
this just sends an object directly to it. This may be used, for example, when
one client draws an element interactively and wants the other clients to display
it as well.
.RS
.LP
These supersede the function of the commands
.BR LS ,
.BR LS: ,
and
.BR LS.
in protocol versions prior to 400.
.LP
All of the following
.BI LS- type
commands include as many of the following parameters as are applicable
to them, in addition to type-specific parameters:
'\" <<list>>
.TP
.B ID
The unique object identifier. This is a string containing upper- or lower-case
letters, digits, underscores and octothorpes. By convention, we create these
as hexadecimal UUID values, but they may be any arbitrary string, including
human-readable IDs such as \*(lqPC1\*(rq, etc.
.TP
'\" <</ital-is-var>>
.BI X " (float)"
The
.I x
coordinate of the \*(lqreference point\*(rq of the element, in standard map pixel units.
.TP
.BI Y " (float)"
The
.I y
coordinate of the \*(lqreference point\*(rq of the element, in standard map pixel units.
.TP
.BI Points " (list of coordinate objects)"
If an object needs more than a single coordinate pair to specify their
location, (e.g., the diagonally opposite corner of a rectangle)
the subsequent points are listed in this parameter. Each
element in the list is an object with the fields:
'\" <<list>>
.RS
.TP
.BI X " (float)"
The
.I x
coordinate in standard map pixel units.
.TP
.BI Y " (float)"
The
.I y
coordinate in standard map pixel units.
.RE
'\" <</>>
.TP
.BI Z " (int)"
The
.I z
\*(lqcoordinate\*(rq of the element is its vertical stacking order
on the displayed map canvas. Higher numbers are drawn after lower numbers.
If two objects have the same
.I z
value and physically overlap, the result is not defined.
.TP
.BI Line
The color used to draw the shape's outline, as a standard color
name or RGB string such as \*(lq#336699\*(rq.
.TP
.BI Fill
As with the
.B Line
field, specifies a color to fill the interior of the element. If omitted or
empty, the object will not be filled. Note that line objects are
.I filled
with the 
.B Fill
color. They don't have an outline so don't use the
.B Line
value.
.TP
.BI Width " (int)"
The width in pixel units of the element's outline.
.TP
.BI Layer
The map layer this element belongs to. 
Currently not implemented.
.TP
.BI Level
The dungeon level where this element appears. 
Currently not implemented.
.TP
.BI Group
The object group to which this element belongs.
Currently not implemented.
.TP
.BI Dash " (int)"
The outline of the element is to be drawn with the specified dash pattern:
'\" <<desc>>
.RS
.TP 3
0
Solid (the default)
.TP
1
Long dashes
.TP
2
Medium dashes
.TP
3
Short dashes
.TP
4
Long-Short pattern
.TP
5
Long-Long-Short pattern
'\" <</>>
.RE
.TP
.BI Hidden " (bool)"
If true, this element MUST NOT be displayed on-screen.
.TP
.BI Locked " (bool)"
If true, this element MUST NOT be edited further by clients.
'\" <<ital-is-var>>
'\" <</>>
.RS
.LP
Each of the following commands which begin with 
.B LS-
defines a different kind of map element.
.RE
.TP
.B LS-ARC
Draws an arc on the canvas. 
The arc is drawn around the circumference
of the ellipse inscribed in the rectangle defined by the reference point and the
first point in the
.B Points
attribute (as opposite corners of a rectangle).
The payload is a JSON object with these parameters in addition to
those common to all map elements:
'\" <<list>>
.RS
.TP
'\" <</ital-is-var>>
.BI ArcMode " (int)"
Specifies how to draw the arc on-screen. 
'\" <<desc>>
.RS
.TP 3
0
Pie slice (default); connects the arc endpoints to the center of the circle.
.TP
1
Arc; does not connect the endpoints to anything else.
.TP
2
Chord; connects the endpoints to each other via a straight line segment.
'\" <</>>
.RE
.TP
.BI Start " (float)"
The number of degrees around the circle to begin drawing the arc.
.TP
.BI Extent " (float)"
The number of degrees around the circle to end drawing the arc.
'\" <</>>
.RE
.TP
.B LS-CIRC
Draws an ellipse on the map canvas.
The payload is a JSON object as described for all map elements above.
The ellipse is defined as described for the 
.B LS-ARC
command, but the entire circumference is drawn.
.TP
.B LS-LINE
Draws a straight line segment from the reference point to the
each point in the
.B Points
attribute (if more than one point is in
.B Points
the result will be multiple connected line segments).
The JSON payload has the following attribute in addition to the common
ones described above:
'\" <<list>>
.RS
.TP
.BI Arrow " (int)"
The style of arrows to draw on the ends of the line:
'\" <<desc>>
.RS
.TP 3
0
No arrows
.TP
1
Arrow on the first point (the reference)
.TP
2
Arrow on the last point
.TP
3
Arrows on both first and last points
'\" <</>>
.RE
'\" <</>>
.RE
.TP
.B LS-POLY
Draws a polygon on the map canvas. The vertices of the polygon
start at the reference point and continue through every point in
the 
.B Points
attribute, and finally connecting back to the reference
point again. The JSON payload contains
the following fields in addition to the common ones described
above:
'\" <<list>>
.RS
.TP
.BI Spline " (int)"
The factor to use when smoothing the sides of the polygon
between its points. 0 means not to smooth at all, resulting
in a shape with straight edges between the vertices. Otherwise,
larger values provide more smoothing.
.TP
.BI Join " (int)"
The join style for the edges of the polygon:
'\" <<desc>>
.RS
.TP 3
0 
Beveled corners
.TP
1
Mitered corners
.TP
2
Rounded corners
'\" <</>>
.RE
'\" <</>>
.RE
.TP
.B LS-RECT
Draws a rectangle defined by the reference point and the first point
in the 
.I points
attribute (as opposite corners of the rectangle).
.TP
.B LS-SAOE
Draws the zone of a spell's area of effect on the canvas. 
The JSON payload contains the following field in addition to those 
described above:
'\" <<list>>
.RS
.TP
.BI AoEShape " (int)"
The shape of the area of effect:
'\" <<desc>>
.RS
.TP 3
0
Cone: a 90\(de pieslice defined as described for a pieslice arc element.
.TP
1
Radius: an ellipse defined as described for a circle element.
.TP
2
Ray: a rectangle defined as described for rectangle elements.
'\" <</>>
.RE
'\" <</>>
.RE
.TP
.B LS-TEXT
Places some text on the canvas. The JSON payload includes the following
fields in addition to those common to all elements:
'\" <<list>>
.RS
.TP
.B Text
The text to be displayed.
.TP
.BI Font " (object)"
The typeface to use for the text. This is an object with the following
fields:
'\" <<list>>
.RS
.TP
.B Family
The name of the font family as recognized by Tk.
.TP
.BI Size " (float)"
The font size as recognized by Tk.
.TP
.BI Weight " (int)"
The type wight to use. This may be 0 for normal or 1 for boldface.
.TP
.BI Slant " (int)"
The type slant to use. This may be 0 for Roman (normal) or 1 for Italic (slanted).
.RE
'\" <</>>
.TP
.BI Anchor " (int)"
Where the reference point is considered to be relative to the text:
'\" <<desc>>
.RS
.TP 3
0
Center
.TP
1
North
.TP
2
South
.TP
3
East
.TP
4
West
.TP
5
Northeast
.TP
6
Northwest
.TP
7
Southwest
.TP
8
Southeast
.RE
'\" <</>>
.RE
'\" <</>>
.TP
.B LS-TILE
Draws an image tile on the canvas. The JSON payload has the following
fields in addition to those common to all map elements:
'\" <<list>>
.RS
.TP
.B Image
The image name as known to the mapper.
.TP
.BI BBHeight " (float)"
The bounding-box height for the region bordering the image.
.TP
.BI BBWidth " (float)"
'\" <<ital-is-var>>
The bounding-box width for the region bordering the image.
'\" <</>>
.RE
.TP
.B MARCO
Status check. If received, reply with a 
.B POLO
command.
Clients MUST NOT send this command.
.RS
.LP
'\" <</bold-is-fixed>>
.B N.B.
'\" <<bold-is-fixed>>
It is important that your client not ignore these occasional ping messages.
For example, if your client is too slow receiving messages such that the
server needs to expend extra work to queue them up for you, it will be
willing to do so if you have been at least responding to
.B MARCO
messages. If you haven't, the server will suspect your client has locked up
or is not going to be able to catch up with the data being sent to it, and
may decide to terminate the client's connection.
.RE
.TP
.B MARK
Make a brief animated marker at the specified coordinates to draw attention
to that space. The JSON payload contains the following fields:
'\" <<list>>
.RS
.TP
'\" <</ital-is-var>>
.BI X " (float)"
The
.I x
coordinate of the marker.
.TP
.BI Y " (float)"
The 
.I y
'\" <<ital-is-var>>
coordinate of the marker.
'\" <</>>
.RE
.TP
.B OA
Updates attributes of a specified map object. Any attributes not listed in the
command MUST remain as-is. The JSON payload includes the following fields:
'\" <<list>>
.RS
.TP 
.B ObjID
The unique object identifier for the object to be modified.
Alternatively, it may be in the form
.BI @ name
where
.I name
is the creature's name in any of the forms allowed for the 
.B AC
command.
.TP
'\" <</ital-is-var>>
.BI NewAttrs " (object)"
'\" <<ital-is-var>>
The set of new attributes and their values, expressed as an object with
field names matching the object attributes to be changed and their associated
values being the new values for those attributes.
'\" <</>>
.LP
Example: 
.B "OA {\[dq]ObjID\[dq]:\[dq]a984a3\[dq],\[dq]NewAttrs\[dq]:{\[dq]X\[dq]:12,\[dq]Y\[dq]:44.5}}"
.LP
Note that there was an implicit assumption in the past that the
.B Name
attribute of a creature would not change and it could be used as an immutable identifier
within a map client for a creature token. However, this is not the case and
in fact GMA now includes explicit features to change this very attribute.
Clients must be prepared to deal with the consequences of a change to any
attribute, including
.BR Name .
The 
.B mapper
client itself does this correctly starting with version 3.39.
.RE
.TP
.B OA+
Adds one or more values to a single attribute of an object known to the mapper.
The payload is a JSON object with the following fields:
'\" <<list>>
.RS
.TP
.BI ObjID
The unique object identifier, specified as for the
.B OA
command.
.TP
.BI AttrName
The name of the attribute to be modified. This MUST be an attribute
whose value is a list of strings. (E.g., the 
.B StatusList
attribute of creature objects.)
.TP
'\" <</ital-is-var>>
.BI Values " (list of strings)"
'\" <<ital-is-var>>
A list of string values to be added to those already in the named attribute.
.RE
'\" <</>>
.TP
.B OA\-
Removes one or more values from a single attribute of an object known to the mapper.
The payload is a JSON object with the following fields:
'\" <<list>>
.RS
.TP
.BI ObjID
The unique object identifier, specified as for the
.B OA
command.
.TP
.BI AttrName
The name of the attribute to be modified. This MUST be an attribute
whose value is a list of strings. (E.g., the 
.B StatusList
attribute of creature objects.)
.TP
'\" <</ital-is-var>>
.BI Values " (list of strings)"
'\" <<ital-is-var>>
A list of string values to be removed from those already in the named attribute.
It is not an error if the value wasn't there to begin with.
.RE
'\" <</>>
.TP
.B OK
The server sends this to the client when it is ready for the client to start
sending commands to it. The accompanying JSON payload includes the following
fields:
'\" <<list>>
.RS
.TP
'\" <</ital-is-var>>
.BI Protocol " (int)"
The protocol version used by the server. Map clients which do not support
that protocol SHOULD warn their users and SHOULD disconnect since they can't
guarantee they can actually communicate with the server.
.TP
.BI Challenge " (base64-encoded bytes)"
'\" <<ital-is-var>>
If present, the
.B Challenge
value is a base-64-encoded authentication challenge. A client must successfully
respond with a valid
.B AUTH
command before any of its commands to the server will be accepted. The server will also
refuse to send the client any map updates until it has successfully authenticated.
.TP
.BI ServerStarted " (RFC 3339-formatted datetime string with sub-second precision)"
The absolute wall-clock time that the server was started.
.TP
.BI ServerActive " (RFC 3339-formatted datetime string with sub-second precision)"
The abolute wall-clock time of the server's last
.B MARCO
ping signal was sent. If this was long ago (more than a minute or two with out-of-the-box
server configuration), it is an indicator that the server's main event loop is deadlocked.
.TP
.BI ServerTime " (RFC 3339-formatted datetime string with sub-second precision)"
The current wall-clock time on the server. This provides an accurate point of reference
to determine how long ago the other server time values occurred.
'\" <</>>
.RE
.TP
.B PRIV
Notice from the server that a command sent by the client is denied due to
insufficient privilege. Clients MUST NOT send this command. The JSON
payload includes the following field:
'\" <<list>>
.RS
.TP
.B Command
The command the client was attempting.
.TP
.B Reason
The reason that command was denied.
'\" <</>>
.RE
.TP
.B POLO
No-op. Clients MUST ignore if received. Clients SHOULD send this in response
to a
.B MARCO
command from the server.
.TP
.B PROGRESS
The server sends this to the client to 
indicate progress of a long-running operation such as downloading files.
(Formerly this was sent as a comment prior to protocol version 400.)
The payload is a JSON object with the following fields:
'\" <<list>>
.RS
.TP
.B OperationID
A unique identifier for the operation we're reporting progress for.
.TP
.B Title
The description of the operation in progress. This is suitable for display to the user.
.TP
'\" <</ital-is-var>>
.BI Value " (int)"
The current value of the progress meter. Units are arbitrary.
.TP
.BI MaxValue " (int)"
The maximum value expected for the progress meter when it is finished.
If this is 0, we don't yet know what the maximum will be, which SHOULD cause
the client to use a progress meter style that indicates that it is not possible
to estimate remaining time to completion. Also note that this value MAY change
over the course of the progress report if the server becomes aware that it has
a better maximum value available to it at that point.
.TP
.BI IsDone " (bool)"
'\" <<ital-is-var>>
A boolean indication that the operation is completed. The client SHOULD remove the
progress meter from display when the operation is completed.
'\" <</>>
.LP
Clients SHOULD NOT send these; they are for the server to notify the client
about progress. If a client does send progress update messages to other
peers, it should be clear that what is being tracked is a process that the
other clients are interested in.
.RE
.TP
.BI PS
Place a creature token on the map. This may be used to define a new creature object
if no object with the given
.I ID
already exists, or replaces an existing token with the (possibly different) parameters
given. The JSON payload includes the following fields:
.RS
'\" <<list>>
.TP 
.B ID
The internal ID by which this creature is to be known. This must be unique. The client
which creates the character token locally should create a unique ID, which is then broadcast
via this command to the other clients, which use the same ID.
.TP
.B Name
The name as displayed on the map. Must be unique among all creatures
currently displayed.
.TP
'\" <</ital-is-var>>
.BI Health " (object)"
If not
.BR null ,
this gives the current health status of the creature. It is an object with the
following fields:
'\" <<list>>
.RS
.TP
.BI MaxHP " (int)"
The creature's maximum number of hit points.
.TP
.BI LethalDamage " (int)"
The amount of lethal damage sustained.
.TP
.BI NonLethalDamage " (int)"
The amount of non-lethal damage sustained.
.TP
.BI Con " (int)"
The grace amount of hit points the creature may sustain over their maximum
before they are considered dead.
.TP
.BI IsFlatFooted " (bool)"
If true, the creature is flat-footed.
.TP
.BI IsStable " (bool)"
If true, the creature has been stabilized to prevent death while critically wounded.
Creatures which are in non-critical states of health don't have this attribute set
even though technically (in a sense) they are \*(lqstable\*(rq.
.TP
.BI Condition
A custom condition status to display on the map, if you wish to override the map's
calculation.
.TP
.BI HPBlur " (int)"
If 0, the creature's health is displayed accurately. Otherwise, this gives
the percentage by which to \*(lqblur\*(rq the hit points as seen by the 
players. For example, if
.B HPBlur
is 10, then hit points are displayed only in 10% increments.
'\" <</>>
.RE
.TP
.BI Gx " (float)"
The grid 
.I x
coordinate for the creature's reference point. Note that this is in
grids, not pixel units.
.TP
.BI Gy " (float)"
The grid 
.I y
coordinate for the creature's reference point. Note that this is in
grids, not pixel units.
.TP
.BI Skin " (int)"
If 0, show the default appearance on the creature's token. Otherwise, show
one of the alternative images defined for that creature.
.TP
.BI SkinSize " (list of strings)"
This gives a list of values to use for the
.B Size
attribute corresponding to the
.B Skin
number. For example, if there are 3 skins defined for a
shape-changing creature, and the first two are medium-size
but the third is large, then 
.B SkinSize
would have the value
.BR [\[dq]M\[dq],\[dq]M\[dq],\[dq]L\[dq]] .
.TP
.BI Elev " (int)"
The creature's elevation in feet relative to the \*(lqfloor\*(rq level.
.TP
.BI Color
The color code used to draw the creature's threat zone.
.TP
.BI Note
A note to attach to the creature token to indicate special conditions or status.
.TP
.BI Size
The tactical size category of the creature.
.TP
.BI Area
The tactical size category for the creature's threat zone.
.TP
.BI StatusList " (list of strings)"
A list of condition codes which apply to the character. These are defined by
the
.B DSM
command (q.v.).
.TP
.BI AoE " (object)"
If not
.BR null ,
a spell area of effect should be drawn around the creature.
The value is an object with these fields:
'\" <<list>>
.RS
.TP
.BI Radius " (float)"
The distance in standard map pixel units away from the creature's center
to the perimeter of the area of effect.
.TP
.BI Color
The color with which to draw the spell area.
.RE
'\" <</>>
.TP
.BI MoveMode " (int)"
The mode of locomotion currently employed by the creature:
'\" <<desc>>
.RS
.TP 3
0
Land (walking)
.TP
1
Burrowing
.TP
2
Climbing
.TP
3
Flying
.TP
4
Swimming
'\" <</>>
.RE
.TP
.BI Reach " (int)"
Indicates if the creature is wielding a reach weapon and thus has an expanded
threat zone. If 0, the threat zone is normal for the creature. If 1, it cannot
attack adjacent foes but has a wider threat space. If 2, it has both threat
zones active at the same time.
.TP
.BI Killed " (bool)"
If true, the creature is dead.
.TP
.BI Dim " (bool)"
If true, the creature does not have initiative now, and their token
should be de-emphasized compared to the one with initiative.
.TP
.BI CreatureType " (int)"
'\" <<ital-is-var>>
The specific type of creature. This may be 0 if the type is unknown, 1 for
monsters, or 2 for players. Clients MUST NOT set this field to a value other
than 1 or 2.
'\" <</>>
.RE
.TP
.B READY
The server sends this to the client to indicate that all preliminary
data has been sent, authentication (if applicable) has been successful,
and the client may proceed to carry out normal operations now.
.TP
.B ROLL
Reports the results of a die roll initiated by the
.B D
command. Clients MUST NOT send this command. The JSON payload includes the following fields:
'\" <<list>>
.RS
.TP
.BI Sender
The name of the user who rolled the dice. 
.TP
'\" <</ital-is-var>>
.BI Recipients " (list of strings)"
The names of the people the message was explicitly addressed to. For
global messages, this should be
.BR null .
.TP
.BI MessageID " (int)"
The unique number assigned by the server for this chat message. (Die roll
results are essentially a kind of chat message.) 
.TP
.BI MoreResults " (bool)"
If true, there will be more
.B ROLL
messages yet to come which are part of the result set for the same die roll
request.
.TP
.B RequestID
The 
.B RequestID
string passed by the client when requesting this die roll, or the empty string
if they didn't.
.TP
.BI ToAll " (bool)"
If true, this is a global message sent to all clients.
The contents of the
.B Recipients
field are ignored; it should be omitted or set to
.BR null .
.TP
.BI ToGM " (bool)"
If true, this message will be sent only to the GM. 
The contents of the
.B Recipients
field are ignored; it should be omitted or set to
.BR null .
.TP
.BI Title
The title describing the purpose of the die-roll as set by the
user, if any.
The title string may include special formatting codes which will be used by
clients supporting the
.B DICE-COLOR-BOXES
optional feature (see the
.B ALLOW
command for details). Clients which did not request this feature will not
see the special formatting codes in the title string.
.TP
.BI Result " (object)"
The result of the die roll. This is an object with the following fields:
'\" <<list>>
.RS
.TP
.BI Result " (int)"
The final numerical result of the die-roll.
.TP
.BI InvalidRequest " (bool)"
If true, the die roll never happened because the request could not be understood.
In this case, the details about the request and reason for failure are in the
.B Details
array. The
.B Result
integer field should be disregarded since there was no result generated.
.TP
.BI ResultSuppressed " (bool)"
If true, this result message describes a die roll request without disclosing the
results of the roll. This is used, for example, when sending a die roll for the
GM to see privately (not even showing the requester the result).
In this case, the value of the
.B Result
field should be ignored.
.TP
.BI Details " (list of objects)"
The details behind how that result was generated are given as a list of objects
with the following fields:
'\" <<list>>
.RS
.TP
.BI Type
A text label describing what the value means in the context of the die-roll
result.
.TP
.BI Value
The value for this part of the result (as a string).
'\" <</>>
.RE
'\" <</>>
.RE
'\" <</>>
'\" <<ital-is-var>>
.RE
.TP
.B SYNC
This command MUST be ignored if received by a client. A client sends this to the
server to request a replay of map commands which would be necessary to catch it
up to the state the other maps are currently in.
A server may be configured to perform a sync operation upon client connection (after, if 
required, authentication) without the client explicitly sending a
.B SYNC
command to it.
.TP
.B SYNC-CHAT
This command MUST be ignored if received by a client. 
Supersedes the 
.B SYNC
command with
.B CHAT
argument in protocol versions prior to 400.
A client sends this to the
server to request a replay of chat messages (including die-roll result notices)
according to the JSON payload, which may include this field:
'\" <<list>>
.RS
.TP
'\" <</ital-is-var>>
.BI Target " (int)"
'\" <<ital-is-var>>
If missing or 0, all chat messages in the server's history are sent to the client.
Otherwise, if
.B Target
is positive, all messages with 
.BR messageID s
greater than
.BR Target .
If
.B Target
is negative, its absolute value gives the number of recent messages to send
to the client (e.g., if
.B Target
is \-50, then the most recent 50 messages are re-sent to the client).
'\" <</>>
.RE
.TP
.B TB
Controls the display of the toolbar in the mapper client.
The JSON payload is an object with the following field:
'\" <<list>>
.RS
.TP
'\" <</ital-is-var>>
.BI Enabled " (bool)"
'\" <<ital-is-var>>
If true, the client SHOULD display its toolbar. If false, the client SHOULD NOT
display it. The client may override this request based on the user's preferences.
'\" <</>>
.RE
.TP
.B TO
Send chat message to a set of recipients. 
The payload is a JSON object with the following fields:
'\" <<list>>
.RS
.TP
.BI Sender
The name of the user sending the message. Clients SHOULD NOT set this field; it
is set by the server when sending these messages to peers.
.TP
'\" <</ital-is-var>>
.BI Recipients " (list of strings)"
The names of the people the message was explicitly addressed to. For
global messages, this should be
.BR null .
.TP
.BI MessageID " (int)"
The unique number assigned by the server for this chat message. Clients SHOULD NOT
set this field.
.TP
.BI ToAll " (bool)"
If true, this is a global message sent to all clients.
The contents of the
.B Recipients
field are ignored; it should be omitted or set to
.BR null .
.TP
.BI ToGM " (bool)"
If true, this message will be sent only to the GM. 
The contents of the
.B Recipients
field are ignored; it should be omitted or set to
.BR null .
.TP
.B Text
The text of the message to be sent.
'\" <<ital-is-var>>
.RE
'\" <</>>
.TP
.B /CONN
This command causes the server to send a summary of the
connections it is currently serving. These are sent back to the client
via the
.B CONN
command documented above.
.TP
.B UPDATES
This provides the latest available versions of various programs. A client MAY
alert the user or initiate an automatic upgrade if it recognizes that it or one
of its dependencies is out of date.
Clients MUST NOT send this command.
(Formerly this was sent as a comment prior to protocol version 400.)
The payload contains the following field:
'\" <<list>>
.RS
.TP
'\" <</ital-is-var>>
.BI Packages " (list of objects)"
Each element in this list is a JSON object with the following fields:
'\" <<list>>
.RS
.TP
.B Name
The name of the software package, such as \*(lqmapper\*(rq, \*(lqgo-gma\*(rq, or \*(lqcore\*(rq.
.TP
.BI Instances " (list of objects)"
A list of all available instances of the named package. Each is a JSON object
with the following fields:
'\" <<list>>
.RS
.TP
.B OS
The name of the operating system platform for which this instance of the package
is available (e.g., \*(lqfreebsd\*(rq, \*(lqlinux\*(rq, \*(lqdarwin\*(rq, \*(lqwindows\*(rq, etc.).
If this is empty, then this instance is platform-independent.
.TP
.B Arch
The name of the hardware architecture for which this instance of the package
is compiled (e.g., \*(lqamd64\*(rq, etc.) If this is empty, then this instance
is architecture-independent.
.TP
.B Version
The semantic version number that users should be using. This is set by the GM
(or designated server administrator\(emhenceforth we will simply use the term
\*(lqGM\*(rq for this role) for their game. It may not necessarily be
the latest version available generally.
.TP
.B Token
The download token used for obtaining a copy of the package. This is entirely
under the GM's control and refers to a file the GM placed on their game server
for their players to access.  The
.I token
value is the non-static part of the download URL from their game server.
'\" <<ital-is-var>>
.RE
'\" <</>>
.RE
'\" <</>>
.RE
'\" <</>>
.TP
.B "WORLD"
This command provides various campaign-world information useful for the client
to know. Clients MUST NOT send this command. 
The payload includes the following parameters:
'\" <<list>>
.RS
.TP
.B Calendar
The name of the calendar system in play, as known to the GMA game clock.
(Formerly this was sent as a comment in the form
.BI "// CALENDAR // " system
prior to protocol version 400.)

Declares which calendaring system the various dates and times are based upon.
'\" <</>>
.LP
Example:
.B "WORLD {\[dq]Calendar\[dq]:\[dq]golarion\[dq]}"
.RE
'\" <</>>
'\" <<TeX>>
'\" \label{manpage:mapper:6:protocol:end}
'\" <</TeX>>
.SH "SEE ALSO"
.LP
.BR mapper (5),
.BR gma (6),
and
.BR server (6).
.SH AUTHORS
.LP
Steve Willoughby / steve@madscience.zone;
John Mechalas (elevation and movement modes).
.SH HISTORY
.LP
This document defines map protocol version 403,
which introduced the
.B AI/
server message and additional fields to the
.B OK
message.
.LP
Protocol version 402 improved the 
.B ROLL
server message by adding support for blind rolls to the GM.
.LP
Protocol version 401
introduced the
.B Grid
parameter to the
.B AV
command.
.LP
Protocol version 400
changed the server communication protocol to use JSON instead of TCL lists.
It also introduced the
.BR PROGRESS ,
.BR PROTOCOL ,
.BR READY ,
.BR UPDATES ,
and
.B WORLD
commands.
.LP
As of the beta-3 release, the
.B RequestID
and
.B MoreResults
fields were added to die roll requests and results messages.
.LP
Version 332 added the
.B GRANTED
server response, guaranteeing that
.B AUTH
will be followed by a response in any case.
.LP
Version 331
changed the way persistent
chat messages are managed, altering the
.BR ROLL ,
.BR TO ,
.BR SYNC ,
and
.BR CC
commands.
.LP
Version 329 added
the
.B CC
command and the extended form of
.BR SYNC .
.LP
Previously, version 328 introduced
the 
.B ACCEPT
command.
.LP
Version 327 added 
the 
.B DENIED
and
.B PRIV
response commands.
.LP
Version 326 added support
for chat channels and die rolling, and changed the response from the
.B /CONN
command to be a structured sequence of data records rather than sending
the reply in comments.
.LP
Protocol 325 added
connection debugging support by changing the
.B AUTH
command and adding
.BR /CONN .
.LP
The version 324 protocol added the
.BR DSM ,
.BR OA+ ,
and
.BR OA\-
protocol commands. This version of the protocol also assumes mapper file format
15 is being used.
.LP
Previously, protocol version 323 added support for server-side persistent 
state and the introduction of the
.B SYNC
protocol command.
.LP
Protocol version 322 added comments to version 321.
.LP
Protocol version 321 added authentication support to the 
capabilities of protocol 320.
.LP
Map protocol version 320 has the same commands as 319, but the
.B HEALTH
attribute of creatures changed from map version 12 to 13, so we are advancing the protocol
version at the same time since maps released for protocol 319 were expecting the older map
format.
.LP
Map protocol version 319 differs from version 318 (the first explicitly
numbered version) by the addition of the
.BR CLR@ ,
.BR M? ,
and
.B M@ 
commands.
.SH COPYRIGHT
Part of the GMA software suite, copyright \(co 1992\-2023 by Steven L. Willoughby, Aloha, Oregon, USA. All Rights Reserved. Distributed under BSD-3-Clause License. \"@m(c)@
